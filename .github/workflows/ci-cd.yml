name: 'CI/CD Pipeline'

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    workflow_dispatch:

# Cancelar ejecuciones previas en la misma rama para ahorrar recursos
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    NODE_VERSION: '20.x'
    CI: true

jobs:
    quality-checks:
        name: Quality Checks
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'
                  cache-dependency-path: package-lock.json

            - name: Install dependencies
              run: npm ci

            - name: Type check
              run: npm run type-check

            - name: Lint code
              run: npm run lint

            - name: Format check
              run: npm run format:check
              continue-on-error: false

    test:
        name: Tests
        runs-on: ubuntu-latest
        needs: quality-checks

        services:
            redis:
                image: redis:7-alpine
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'
                  cache-dependency-path: package-lock.json

            - name: Install system dependencies for MongoDB
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                      libcurl4 \
                      openssl \
                      libssl-dev \
                      ca-certificates \
                      curl \
                      wget \
                      gnupg \
                      lsb-release

            - name: Install libssl1.1 for MongoDB Memory Server
              run: |
                  sudo apt-get install -y libssl1.1 || \
                  (wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl1.1/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb && \
                   sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb) || \
                  (sudo ln -sf /usr/lib/x86_64-linux-gnu/libcrypto.so.3 /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 && \
                   sudo ln -sf /usr/lib/x86_64-linux-gnu/libssl.so.3 /usr/lib/x86_64-linux-gnu/libssl.so.1.1)

            - name: Cache mongodb-memory-server binaries
              uses: actions/cache@v3
              with:
                  path: ~/.cache/mongodb-binaries
                  key: mongodb-binaries-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
                  restore-keys: |
                      mongodb-binaries-${{ runner.os }}-

            - name: Install dependencies
              run: npm ci

            - name: Setup MongoDB Memory Server environment
              run: bash scripts/setup-mongodb-env.sh
              env:
                  MONGODB_MEMORY_SERVER_VERSION: '6.0.0'
                  MONGODB_MEMORY_SERVER_DOWNLOAD_TIMEOUT: '60000'
                  MONGODB_MEMORY_SERVER_DOWNLOAD_RETRY: '3'

            - name: Setup test environment
              run: bash scripts/setup-ci-env.sh

            - name: Diagnose MongoDB Memory Server setup
              run: bash scripts/diagnose-mongodb-setup.sh

            - name: Create test results directory
              run: mkdir -p test-results

            - name: Run unit tests
              run: npm run test:unit
              env:
                  CI: true
                  NODE_ENV: test

            - name: Run integration tests
              run: npm run test:integration
              env:
                  CI: true
                  NODE_ENV: test
                  MONGODB_MEMORY_SERVER_VERSION: '6.0.0'
                  MONGODB_MEMORY_SERVER_DOWNLOAD_TIMEOUT: '60000'
                  MONGODB_MEMORY_SERVER_DOWNLOAD_RETRY: '3'

            - name: Generate coverage report
              run: npm run test:coverage
              env:
                  CI: true
                  NODE_ENV: test

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v4
              with:
                  file: ./coverage/lcov.info
                  flags: unittests
                  name: codecov-umbrella
              continue-on-error: true

            - name: Upload coverage artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-reports
                  path: coverage/
                  retention-days: 30

    build:
        name: Build
        runs-on: ubuntu-latest
        needs: test

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'
                  cache-dependency-path: package-lock.json

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build

            - name: Archive build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: dist-files
                  path: dist/
                  retention-days: 30

    security:
        name: Security Audit
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'
                  cache-dependency-path: package-lock.json

            - name: Install dependencies
              run: npm ci --omit=dev

            - name: Run security audit (Critical vulnerabilities)
              run: npm audit --audit-level critical --production

            - name: Run security audit (High vulnerabilities)
              run: npm audit --audit-level high --production
              continue-on-error: true

            - name: Run security audit (All vulnerabilities)
              run: npm audit --production
              continue-on-error: true

    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        needs: [build, security]
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: dist-files
                  path: dist/

            - name: Deploy placeholder
              run: |
                  echo "ðŸš€ Deployment step"
                  echo "ðŸ“¦ Build artifacts downloaded to ./dist/"
                  echo "ðŸ”§ Configure your deployment strategy here"
                  echo "   - AWS, Vercel, Railway, Heroku, etc."
                  echo "   - Docker deployment"
                  echo "   - Server deployment"
