openapi: 3.0.0
info:
  title: API Guide TypeScript
  description: Complete API collection for the Express TypeScript API with proper authentication and all endpoints
  version: 1.0.0
  contact:
    name: API Support
    email: support@apiguide.com
servers:
- url: http://localhost:5001/api/v1
  description: Development server
- url: https://api.apiguide.com/api/v1
  description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
  schemas:
    # Common Types
    GeoJSONPoint:
      type: object
      properties:
        type:
          type: string
          enum: [ Point ]
          example: "Point"
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          example: [ 40.7128, -74.006 ]

    Contact:
      type: object
      properties:
        phone:
          type: string
          example: "+1234567890"
        email:
          type: string
          format: email
          example: "contact@example.com"
        facebook:
          type: string
          example: "facebook.com/example"
        instagram:
          type: string
          example: "instagram.com/example"

    BusinessHours:
      type: object
      properties:
        dayOfWeek:
          type: string
          example: "Monday"
        openTime:
          type: string
          example: "09:00"
        closeTime:
          type: string
          example: "17:00"

    Animal:
      type: object
      properties:
        animalName:
          type: string
          example: "Leo"
        specie:
          type: string
          example: "Lion"
        age:
          type: number
          example: 5
        gender:
          type: string
          enum: [ male, female ]
          example: "male"
        habitat:
          type: string
          example: "Savanna"
        diet:
          type: array
          items:
            type: string
          example: [ "meat", "bones" ]
        image:
          type: string
          format: uri
          example: "https://example.com/animal.jpg"
        vaccines:
          type: array
          items:
            type: string
          example: [ "Rabies", "Distemper" ]
        lastVaccine:
          type: string
          format: date
          example: "2024-01-15"

    Experience:
      type: object
      properties:
        title:
          type: string
          example: "Software Developer"
        company:
          type: string
          example: "Tech Corp"
        location:
          type: string
          example: "New York, NY"
        from:
          type: string
          format: date
          example: "2020-01-01"
        to:
          type: string
          format: date
          example: "2023-12-31"
        current:
          type: boolean
          example: false
        description:
          type: string
          example: "Developed web applications using React and Node.js"

    Education:
      type: object
      properties:
        school:
          type: string
          example: "University of Technology"
        degree:
          type: string
          example: "Bachelor of Science"
        fieldOfStudy:
          type: string
          example: "Computer Science"
        from:
          type: string
          format: date
          example: "2016-09-01"
        to:
          type: string
          format: date
          example: "2020-05-15"
        current:
          type: boolean
          example: false
        description:
          type: string
          example: "Focused on software engineering and web development"

    Social:
      type: object
      properties:
        youtube:
          type: string
          example: "youtube.com/@example"
        facebook:
          type: string
          example: "facebook.com/example"
        twitter:
          type: string
          example: "twitter.com/example"
        instagram:
          type: string
          example: "instagram.com/example"
        linkedin:
          type: string
          example: "linkedin.com/in/example"

    Skill:
      type: object
      properties:
        skill:
          type: string
          example: "JavaScript"
        company:
          type: string
          example: "Tech Corp"
        location:
          type: string
          example: "New York, NY"
        from:
          type: string
          format: date
          example: "2020-01-01"
        to:
          type: string
          format: date
          example: "2023-12-31"
        current:
          type: boolean
          example: false
        description:
          type: string
          example: "Advanced JavaScript development"

    Like:
      type: object
      properties:
        username:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"

    Comment:
      type: object
      properties:
        id:
          type: string
          example: "comment123"
        username:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        text:
          type: string
          example: "Great post!"
        name:
          type: string
          example: "John Doe"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    # Main Models
    User:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        username:
          type: string
          example: "testuser"
        email:
          type: string
          format: email
          example: "test@example.com"
        role:
          type: string
          enum: [ user, professional, admin ]
          default: user
        isAdmin:
          type: boolean
          example: false
        isActive:
          type: boolean
          example: true
        isDeleted:
          type: boolean
          example: false
        photo:
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Business:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c124"
        namePlace:
          type: string
          example: "Tech Solutions Inc"
        author:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        address:
          type: string
          example: "123 Business St, New York, NY"
        location:
          $ref: '#/components/schemas/GeoJSONPoint'
        image:
          type: string
          format: uri
          example: "https://example.com/business.jpg"
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        budget:
          type: number
          example: 50000
        typeBusiness:
          type: string
          example: "technology"
        hours:
          type: array
          items:
            $ref: '#/components/schemas/BusinessHours'
        reviews:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c125" ]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        numReviews:
          type: number
          example: 25
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Restaurant:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c126"
        restaurantName:
          type: string
          example: "El Buen Sabor"
        author:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        typePlace:
          type: string
          example: "restaurant"
        address:
          type: string
          example: "123 Main St, New York, NY"
        location:
          $ref: '#/components/schemas/GeoJSONPoint'
        image:
          type: string
          format: uri
          example: "https://example.com/restaurant.jpg"
        budget:
          type: string
          enum: [ low, medium, high ]
          example: "medium"
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        cuisine:
          type: array
          items:
            type: string
          example: [ "Mexican", "Latin American" ]
        reviews:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c125" ]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        numReviews:
          type: number
          example: 25
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Doctor:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c127"
        doctorName:
          type: string
          example: "Dr. Smith"
        author:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        address:
          type: string
          example: "456 Medical St, New York, NY"
        location:
          $ref: '#/components/schemas/GeoJSONPoint'
        image:
          type: string
          format: uri
          example: "https://example.com/doctor.jpg"
        specialty:
          type: string
          example: "Cardiology"
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        reviews:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c125" ]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        numReviews:
          type: number
          example: 25
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Market:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c128"
        marketName:
          type: string
          example: "Central Market"
        author:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        address:
          type: string
          example: "789 Market St, New York, NY"
        location:
          $ref: '#/components/schemas/GeoJSONPoint'
        image:
          type: string
          format: uri
          example: "https://example.com/market.jpg"
        typeMarket:
          type: string
          enum: [ supermarket, "convenience store", "grocery store" ]
          example: "supermarket"
        reviews:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c125" ]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        numReviews:
          type: number
          example: 25
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Recipe:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c129"
        title:
          type: string
          example: "Delicious Tacos"
        author:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        description:
          type: string
          example: "Authentic Mexican tacos recipe"
        instructions:
          type: string
          example: "1. Prepare the meat... 2. Cook the tortillas..."
        ingredients:
          type: array
          items:
            type: string
          example: [ "tortillas", "beef", "onions", "cilantro" ]
        typeDish:
          type: string
          example: "main course"
        image:
          type: string
          format: uri
          example: "https://example.com/recipe.jpg"
        cookingTime:
          type: number
          example: 30
        difficulty:
          type: string
          example: "medium"
        budget:
          type: string
          example: "low"
        reviews:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c125" ]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        numReviews:
          type: number
          example: 25
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Post:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c130"
        username:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        text:
          type: string
          example: "This is my post content"
        name:
          type: string
          example: "John Doe"
        avatar:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Sanctuary:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c131"
        sanctuaryName:
          type: string
          example: "Wildlife Sanctuary"
        author:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        address:
          type: string
          example: "321 Nature St, New York, NY"
        location:
          $ref: '#/components/schemas/GeoJSONPoint'
        image:
          type: string
          format: uri
          example: "https://example.com/sanctuary.jpg"
        typeofSanctuary:
          type: string
          example: "wildlife"
        animals:
          type: array
          items:
            $ref: '#/components/schemas/Animal'
        capacity:
          type: number
          example: 100
        caretakers:
          type: array
          items:
            type: string
          example: [ "John Smith", "Jane Doe" ]
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        reviews:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c125" ]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        numReviews:
          type: number
          example: 25
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Profession:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c132"
        professionName:
          type: string
          example: "Software Developer"
        author:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        address:
          type: string
          example: "654 Professional St, New York, NY"
        location:
          $ref: '#/components/schemas/GeoJSONPoint'
        specialty:
          type: string
          example: "Web Development"
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        reviews:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c125" ]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        numReviews:
          type: number
          example: 25
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    ProfessionalProfile:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c133"
        user:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        contact:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        experience:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        social:
          type: array
          items:
            $ref: '#/components/schemas/Social'
        date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        reviews:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c125" ]
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 4.5
        numReviews:
          type: number
          example: 25
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Review:
      type: object
      properties:
        _id:
          type: string
          example: "60c72b2f9b1d8b0015b3c125"
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 5
        title:
          type: string
          minLength: 5
          maxLength: 100
          example: "Excelente comida"
        content:
          type: string
          minLength: 10
          maxLength: 1000
          example: "La mejor comida mexicana que he probado"
        visitDate:
          type: string
          format: date
          example: "2024-01-15"
        recommendedDishes:
          type: array
          items:
            type: string
            maxLength: 50
          example: [ "Tacos al pastor", "Guacamole" ]
        tags:
          type: array
          items:
            type: string
            maxLength: 30
          example: [ "auténtico", "familiar" ]
        author:
          type: string
          example: "60c72b2f9b1d8b0015b3c123"
        restaurant:
          type: string
          example: "60c72b2f9b1d8b0015b3c126"
        helpfulCount:
          type: number
          example: 10
        helpfulVotes:
          type: array
          items:
            type: string
          example: [ "60c72b2f9b1d8b0015b3c123" ]
        timestamps:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"
        error:
          type: string
          example: "ValidationError"
security:
- bearerAuth: []
tags:
- name: Authentication
- name: Users
- name: Businesses
- name: Restaurants
- name: Doctors
- name: Markets
- name: Recipes
- name: Posts
- name: Sanctuaries
- name: Professions
- name: Professional Profiles
- name: Reviews
- name: Cache Management
paths:
  /users/register:
    post:
      tags:
      - Authentication
      summary: Register User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: John Doe
                email: john@example.com
                password: password123
                role: user
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/login:
    post:
      tags:
      - Authentication
      summary: Login User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: john@example.com
                password: password123
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/forgot-password:
    post:
      tags:
      - Authentication
      summary: Forgot Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: john@example.com
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/reset-password:
    put:
      tags:
      - Authentication
      summary: Reset Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: reset-token-here
                newPassword: newpassword123
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/logout:
    post:
      tags:
      - Authentication
      summary: Logout
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users:
    get:
      tags:
      - Users
      summary: Get All Users
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/:id:
    get:
      tags:
      - Users
      summary: Get User By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Users
      summary: Delete User
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/profile/:id:
    put:
      tags:
      - Users
      summary: Update User Profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Updated Name
                email: updated@example.com
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /businesses:
    get:
      tags:
      - Businesses
      summary: Get All Businesses
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Businesses
      summary: Create Business
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: My Business
                address: 123 Main St, City, Country
                contact:
                - phone: 1234567890
                  email: business@example.com
                  facebook: facebook.com/mybusiness
                  instagram: instagram.com/mybusiness
                image: https://example.com/image.jpg
                hours:
                - dayOfWeek: Monday
                  openTime: '09:00'
                  closeTime: '17:00'
                typeBusiness: retail
                budget: 1000
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /businesses/:id:
    get:
      tags:
      - Businesses
      summary: Get Business By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Businesses
      summary: Update Business
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: Updated Business Name
                address: 456 Updated St, City, Country
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Businesses
      summary: Delete Business
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /businesses/add-review/:id:
    post:
      tags:
      - Businesses
      summary: Add Review to Business
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rating: 5
                comment: Excellent service!
                name: John Doe
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /restaurants:
    get:
      tags:
      - Restaurants
      summary: Get All Restaurants
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Restaurants
      summary: Create Restaurant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: My Restaurant
                address: 123 Food St, City, Country
                contact:
                - phone: 1234567890
                  email: restaurant@example.com
                image: https://example.com/restaurant.jpg
                hours:
                - dayOfWeek: Monday
                  openTime: '11:00'
                  closeTime: '22:00'
                cuisine: Italian
                priceRange: $$
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /restaurants/:id:
    get:
      tags:
      - Restaurants
      summary: Get Restaurant By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Restaurants
      summary: Update Restaurant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: Updated Restaurant Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Restaurants
      summary: Delete Restaurant
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /restaurants/add-review/:id:
    post:
      tags:
      - Restaurants
      summary: Add Review to Restaurant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rating: 4
                comment: Great food!
                name: Jane Doe
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /restaurants/top-rated:
    get:
      tags:
      - Restaurants
      summary: Get Top Rated Restaurants
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

  /doctors:
    get:
      tags:
      - Doctors
      summary: Get All Doctors
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Doctors
      summary: Create Doctor
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: Dr. Smith Clinic
                address: 123 Medical St, City, Country
                contact:
                - phone: 1234567890
                  email: doctor@example.com
                image: https://example.com/doctor.jpg
                specialty: Cardiology
                experience: 10
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /doctors/:id:
    get:
      tags:
      - Doctors
      summary: Get Doctor By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Doctors
      summary: Update Doctor
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: Updated Doctor Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Doctors
      summary: Delete Doctor
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /doctors/add-review/:id:
    post:
      tags:
      - Doctors
      summary: Add Review to Doctor
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rating: 5
                comment: Excellent doctor!
                name: Patient Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /markets:
    get:
      tags:
      - Markets
      summary: Get All Markets
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Markets
      summary: Create Market
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: Central Market
                address: 123 Market St, City, Country
                contact:
                - phone: 1234567890
                  email: market@example.com
                image: https://example.com/market.jpg
                marketType: farmers
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /markets/:id:
    get:
      tags:
      - Markets
      summary: Get Market By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Markets
      summary: Update Market
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: Updated Market Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Markets
      summary: Delete Market
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /markets/add-review/:id:
    post:
      tags:
      - Markets
      summary: Add Review to Market
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rating: 4
                comment: Great market!
                name: Customer Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /recipes:
    get:
      tags:
      - Recipes
      summary: Get All Recipes
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Recipes
      summary: Create Recipe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Delicious Recipe
                description: A wonderful recipe
                ingredients:
                - ingredient1
                - ingredient2
                instructions:
                - step1
                - step2
                cookingTime: 30
                difficulty: easy
                image: https://example.com/recipe.jpg
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /recipes/:id:
    get:
      tags:
      - Recipes
      summary: Get Recipe By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Recipes
      summary: Update Recipe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Updated Recipe Title
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Recipes
      summary: Delete Recipe
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /recipes/add-review/:id:
    post:
      tags:
      - Recipes
      summary: Add Review to Recipe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rating: 5
                comment: Amazing recipe!
                name: Chef Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts:
    get:
      tags:
      - Posts
      summary: Get All Posts
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Posts
      summary: Create Post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: My Post Title
                content: This is the content of my post
                image: https://example.com/post-image.jpg
                tags:
                - tag1
                - tag2
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/:id:
    get:
      tags:
      - Posts
      summary: Get Post By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Posts
      summary: Update Post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Updated Post Title
                content: Updated content
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Posts
      summary: Delete Post
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/like/:id:
    post:
      tags:
      - Posts
      summary: Like Post
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/unlike/:id:
    post:
      tags:
      - Posts
      summary: Unlike Post
      requestBody:
        content: {}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/comment/:id:
    post:
      tags:
      - Posts
      summary: Add Comment to Post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                text: This is a comment
                name: Commenter Name
                avatar: https://example.com/avatar.jpg
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /sanctuaries:
    get:
      tags:
      - Sanctuaries
      summary: Get All Sanctuaries
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Sanctuaries
      summary: Create Sanctuary
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: Wildlife Sanctuary
                address: 123 Nature St, City, Country
                contact:
                - phone: 1234567890
                  email: sanctuary@example.com
                image: https://example.com/sanctuary.jpg
                sanctuaryType: wildlife
                description: A beautiful wildlife sanctuary
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /sanctuaries/:id:
    get:
      tags:
      - Sanctuaries
      summary: Get Sanctuary By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Sanctuaries
      summary: Update Sanctuary
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                namePlace: Updated Sanctuary Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Sanctuaries
      summary: Delete Sanctuary
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /sanctuaries/add-review/:id:
    post:
      tags:
      - Sanctuaries
      summary: Add Review to Sanctuary
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rating: 5
                comment: Beautiful sanctuary!
                name: Visitor Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /professions:
    get:
      tags:
      - Professions
      summary: Get All Professions
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Professions
      summary: Create Profession
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Software Developer
                description: Develops software applications
                category: Technology
                requirements:
                - Programming skills
                - Problem solving
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /professions/:id:
    get:
      tags:
      - Professions
      summary: Get Profession By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Professions
      summary: Update Profession
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Updated Profession Title
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Professions
      summary: Delete Profession
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /professions/add-review/:id:
    post:
      tags:
      - Professions
      summary: Add Review to Profession
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rating: 4
                comment: Great profession!
                name: Reviewer Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /professionalProfile:
    get:
      tags:
      - Professional Profiles
      summary: Get All Professional Profiles
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
      - Professional Profiles
      summary: Create Professional Profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: John Professional
                profession: Software Developer
                experience: 5
                skills:
                - JavaScript
                - TypeScript
                - Node.js
                bio: Experienced software developer
                contact:
                  email: john@example.com
                  phone: 1234567890
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /professionalProfile/:id:
    get:
      tags:
      - Professional Profiles
      summary: Get Professional Profile By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
      - Professional Profiles
      summary: Update Professional Profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Updated Professional Name
      parameters:
      - name: Content-Type
        in: header
        schema:
          type: string
        example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
      - Professional Profiles
      summary: Delete Professional Profile
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}

  /cache/stats:
    get:
      tags:
      - Cache Management
      summary: Get cache statistics
      responses:
        '200':
          description: Cache stats retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object

  /cache/health:
    get:
      tags:
      - Cache Management
      summary: Get cache health status
      responses:
        '200':
          description: Cache health retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object

  /cache/warm:
    post:
      tags:
      - Cache Management
      summary: Warm cache with data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dataType:
                  type: string
                  enum: [ all, restaurants, businesses, users, categories, geo ]
                  default: all
                  description: Type of data to warm
                autoStart:
                  type: boolean
                  default: true
                intervalMinutes:
                  type: number
                  default: 30
      responses:
        '200':
          description: Cache warming started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object

  /cache/alerts:
    get:
      tags:
      - Cache Management
      summary: Get cache alerts
      responses:
        '200':
          description: Cache alerts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object

  /cache/invalidate/{pattern}:
    delete:
      tags:
      - Cache Management
      summary: Invalidate cache by pattern
      parameters:
      - name: pattern
        in: path
        required: true
        schema:
          type: string
        description: Cache pattern to invalidate
        example: "restaurants:*"
      responses:
        '200':
          description: Cache invalidated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Cache invalidated successfully"

  /cache/flush:
    delete:
      tags:
      - Cache Management
      summary: Flush all cache
      responses:
        '200':
          description: All cache flushed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "All cache flushed successfully"

  /reviews/{id}:
    get:
      tags:
      - Reviews
      summary: Get review by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Review ID
      responses:
        '200':
          description: Review retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Review'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
      - Reviews
      summary: Update review
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Review ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Review'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews/{id}/helpful:
    post:
      tags:
      - Reviews
      summary: Mark review as helpful
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Review ID
      responses:
        '200':
          description: Review marked as helpful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Review marked as helpful"
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
